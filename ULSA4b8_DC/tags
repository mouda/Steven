!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BranchBound	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::BranchBound( Eigen::MatrixXd& matSelec, $/;"	f	class:ULSA4b8_DC
CFLAGS	Makefile	/^CFLAGS=-O -O1 -O2 -O3$/;"	m
COMM_UTILITY	Makefile	/^COMM_UTILITY= ..\/commonLibrary\/CORRE_MA_OPE.o \\$/;"	m
CPP	Makefile	/^CPP= g++$/;"	m
CheckAllScheduled	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::CheckAllScheduled( bool const * const aryBoolSched)$/;"	f	class:ULSA4b8_DC
CheckFeasible	ULSA4b8_DC.cpp	/^ULSA4b8_DC::CheckFeasible( bool const * const supStru, double txTime2nd)$/;"	f	class:ULSA4b8_DC
ClusterStructure	ClusterStructure.h	/^    ClusterStructure():m_numNode(0),m_maxNumCh(0){};$/;"	f	class:ClusterStructure
ClusterStructure	ClusterStructure.h	/^    ClusterStructure(const int& totalNodes, const int& maxChNum):$/;"	f	class:ClusterStructure
ClusterStructure	ClusterStructure.h	/^class ClusterStructure $/;"	c
EigenMatrixIsSmaller	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::EigenMatrixIsSmaller( const Eigen::MatrixXd& lhs, $/;"	f	class:ULSA4b8_DC
FileExist	utility.cpp	/^bool FileExist( const std::string& Name)$/;"	f
GetChIdxByName	ClusterStructure.cpp	/^ClusterStructure::GetChIdxByName( const int& nodeName )$/;"	f	class:ClusterStructure
GetChNameByName	ClusterStructure.cpp	/^ClusterStructure::GetChNameByName( const int& nodeName)$/;"	f	class:ClusterStructure
GetLastLine	utility.cpp	/^std::string GetLastLine(std::ifstream& in)$/;"	f
GetListCluMemeber	ClusterStructure.h	/^    const list<list<int> >& GetListCluMemeber(){return m_listCluMember; }$/;"	f	class:ClusterStructure
GetVecHeadName	ClusterStructure.h	/^    const vector<int>&  GetVecHeadName(){ return m_vecHeadName; }$/;"	f	class:ClusterStructure
Gib	ULSA4b8_DC.h	/^  float *Gib; \/\/ channel gain from node i to base station$/;"	m	class:ULSA4b8_DC
Gij	ULSA4b8_DC.h	/^  float **Gij;\/\/ channel gain from node i to node j$/;"	m	class:ULSA4b8_DC
INCLUDE_PATH	Makefile	/^INCLUDE_PATH=-I$(PREFIX)\/boost1550\/include \\$/;"	m
Ignoreline	utility.cpp	/^std::istream& Ignoreline(std::ifstream& in, std::ifstream::pos_type& pos)$/;"	f
IsolateNodeName	ULSA4b8_DC.h	/^  int  IsolateNodeName;$/;"	m	class:ULSA4b8_DC
JoiningHeadIndex	ULSA4b8_DC.h	/^  int  JoiningHeadIndex;$/;"	m	class:ULSA4b8_DC
LIB_FLAGS	Makefile	/^LIB_FLAGS=-lboost_math_c99 \\$/;"	m
LIB_PATH	Makefile	/^LIB_PATH=-L$(PREFIX)\/boost1550\/lib \\$/;"	m
MaxSNR	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::MaxSNR( double txTime2nd )$/;"	f	class:ULSA4b8_DC
OBJECTS	Makefile	/^OBJECTS=$(SOURCES:.cpp=.o)$/;"	m
OmegaValue	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::OmegaValue( const int& nodeName, double txTime2nd )$/;"	f	class:ULSA4b8_DC
PREFIX	Makefile	/^PREFIX=\/home\/share$/;"	m
Perm	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::Perm(const Eigen::MatrixXd& matAij,$/;"	f	class:ULSA4b8_DC
SA_FIN_TEMP	main.cpp	13;"	d	file:
SA_INI_TEMP	main.cpp	12;"	d	file:
SOURCES	Makefile	/^SOURCES=main.o ULSA4b8_DC.o ClusterStructure.o utility.o $/;"	m
SchedulingOneShut	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::SchedulingOneShut( double txTime2nd, bool const * const aryBoolSched, bool * aryBoolReport) $/;"	f	class:ULSA4b8_DC
SetListCluMember	ClusterStructure.h	/^    void SetListCluMember( const list<list<int> >& inListCluMember)$/;"	f	class:ClusterStructure
SetRecord	ClusterStructure.cpp	/^ClusterStructure::SetRecord( $/;"	f	class:ClusterStructure
SetVecHeadName	ClusterStructure.h	/^    void SetVecHeadName( const vector<int>& inVecHeadName)$/;"	f	class:ClusterStructure
ULSA4b8_DC	ULSA4b8_DC.cpp	/^ULSA4b8_DC::ULSA4b8_DC(){};$/;"	f	class:ULSA4b8_DC
ULSA4b8_DC	ULSA4b8_DC.cpp	/^ULSA4b8_DC::ULSA4b8_DC(FILE *fileReadCursor, int inputTotalNodes, int inputMaxChNum,int inputSAFac,  \\$/;"	f	class:ULSA4b8_DC
ULSA4b8_DC	ULSA4b8_DC.h	/^class ULSA4b8_DC :public SABASE$/;"	c
ULSA4b8_DC_H	ULSA4b8_DC.h	17;"	d
_UTILITY_	utility.h	2;"	d
addMemberSA	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::addMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b8_DC
addMemberSAIni	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::addMemberSAIni(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b8_DC
aryFlagHRDone	ULSA4b8_DC.h	/^  bool *aryFlagHRDone; \/\/If it is true means Head Rotate have been done in this structure, starrt from ULSA4b8_DC$/;"	m	class:ULSA4b8_DC
bandwidthKhz	ULSA4b8_DC.h	/^  double  bandwidthKhz;$/;"	m	class:ULSA4b8_DC
begin	ULSA4b8_DC.h	/^  clock_t begin, end;$/;"	m	class:ULSA4b8_DC
best1stTierTraffic	ULSA4b8_DC.h	/^  double best1stTierTraffic;$/;"	m	class:ULSA4b8_DC
best1st_Joule	ULSA4b8_DC.h	/^  double best1st_Joule;$/;"	m	class:ULSA4b8_DC
best1st_ms	ULSA4b8_DC.h	/^  double best1st_ms;$/;"	m	class:ULSA4b8_DC
best2ndTierTraffic	ULSA4b8_DC.h	/^  double best2ndTierTraffic;$/;"	m	class:ULSA4b8_DC
best2nd_Joule	ULSA4b8_DC.h	/^  double best2nd_Joule;$/;"	m	class:ULSA4b8_DC
best2nd_ms	ULSA4b8_DC.h	/^  double best2nd_ms;$/;"	m	class:ULSA4b8_DC
bestAllServeFound	ULSA4b8_DC.h	/^  bool   bestAllServeFound;$/;"	m	class:ULSA4b8_DC
bestAllSupStru	ULSA4b8_DC.h	/^  bool *bestAllSupStru;$/;"	m	class:ULSA4b8_DC
bestAvgInterference	ULSA4b8_DC.h	/^  double bestAvgInterference;$/;"	m	class:ULSA4b8_DC
bestAvgPowerOFAllNodes	ULSA4b8_DC.h	/^  double bestAvgPowerOFAllNodes;$/;"	m	class:ULSA4b8_DC
bestChNum	ULSA4b8_DC.h	/^  int    bestChNum;$/;"	m	class:ULSA4b8_DC
bestFeasibleJEntropy	ULSA4b8_DC.h	/^  double bestFeasibleJEntropy;$/;"	m	class:ULSA4b8_DC
bestFeasiblePayoff	ULSA4b8_DC.h	/^  double bestFeasiblePayoff;$/;"	m	class:ULSA4b8_DC
bestFeasibleSupNum	ULSA4b8_DC.h	/^  int    bestFeasibleSupNum;$/;"	m	class:ULSA4b8_DC
bestMaClusterStru	ULSA4b8_DC.h	/^  bool** bestMaClusterStru;$/;"	m	class:ULSA4b8_DC
bestNextNodePower	ULSA4b8_DC.h	/^  double* bestNextNodePower;$/;"	m	class:ULSA4b8_DC
bestTrafficReductionRatio	ULSA4b8_DC.h	/^  double bestTrafficReductionRatio;$/;"	m	class:ULSA4b8_DC
bestUpperLayerResource	ULSA4b8_DC.h	/^  double bestUpperLayerResource;$/;"	m	class:ULSA4b8_DC
cSystem	ULSA4b8_DC.h	/^  ULCS1b*  cSystem;   \/\/ system cluseter structure$/;"	m	class:ULSA4b8_DC
calculateMatrics_minResors	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::calculateMatrics_minResors()\/\/Calculate next performance matircs$/;"	f	class:ULSA4b8_DC
checkBestClusterStructure_DataCentric	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::checkBestClusterStructure_DataCentric(int inputRound)$/;"	f	class:ULSA4b8_DC
compRatio	ULSA4b8_DC.h	/^  double compRatio;$/;"	m	class:ULSA4b8_DC
compareDis	ULSA4b8_DC.h	/^    compareDis(const ULSA4b8_DC& sa) : mySA(sa) {} \/\/ constructor$/;"	f	struct:ULSA4b8_DC::compareDis
compareDis	ULSA4b8_DC.h	/^  struct compareDis$/;"	s	class:ULSA4b8_DC
computeBestAvgInterference	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeBestAvgInterference()$/;"	f	class:ULSA4b8_DC
computeBestAvgPower	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeBestAvgPower()$/;"	f	class:ULSA4b8_DC
computeBestTRR_DataCentric	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeBestTRR_DataCentric()$/;"	f	class:ULSA4b8_DC
computeNewInterference_FromIsoCluster	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeNewInterference_FromIsoCluster(vector<double> &newInterf,std::vector<double>&newPower,int IsoName,int isoCluIndex){$/;"	f	class:ULSA4b8_DC
computeNewInterference_FromNewTarHI	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeNewInterference_FromNewTarHI(vector<double> &newInterf,$/;"	f	class:ULSA4b8_DC
computeOriInterference_GivenIsolate	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeOriInterference_GivenIsolate(vector<double> &oriInterf,vector<double> &interfExcept,int isoCluIndex){$/;"	f	class:ULSA4b8_DC
computeOriInterference_GivenTarInJoinI	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeOriInterference_GivenTarInJoinI($/;"	f	class:ULSA4b8_DC
computeUpperResourceNoCodingNoPowerControl	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::computeUpperResourceNoCodingNoPowerControl()$/;"	f	class:ULSA4b8_DC
computingTimes	ULSA4b8_DC.h	/^  float computingTimes;$/;"	m	class:ULSA4b8_DC
confirmNeighbor3i	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::confirmNeighbor3i()$/;"	f	class:ULSA4b8_DC
confirmStructureChange	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::confirmStructureChange()$/;"	f	class:ULSA4b8_DC
consSol	ULSA4b8_DC.h	/^  ULConstraintSolver* consSol;$/;"	m	class:ULSA4b8_DC
coolOnce_minResors	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::coolOnce_minResors()$/;"	f	class:ULSA4b8_DC
correlationFactor	ULSA4b8_DC.h	/^  double correlationFactor;$/;"	m	class:ULSA4b8_DC
cur1st_Joule	ULSA4b8_DC.h	/^  double cur1st_Joule;$/;"	m	class:ULSA4b8_DC
cur1st_ms	ULSA4b8_DC.h	/^  double cur1st_ms;$/;"	m	class:ULSA4b8_DC
cur2nd_Joule	ULSA4b8_DC.h	/^  double cur2nd_Joule;$/;"	m	class:ULSA4b8_DC
cur2nd_ms	ULSA4b8_DC.h	/^  double cur2nd_ms;$/;"	m	class:ULSA4b8_DC
curChNum	ULSA4b8_DC.h	/^  int curChNum;$/;"	m	class:ULSA4b8_DC
curJEntropy	ULSA4b8_DC.h	/^  double  curJEntropy;$/;"	m	class:ULSA4b8_DC
curPayoff	ULSA4b8_DC.h	/^  double curPayoff;$/;"	m	class:ULSA4b8_DC
curSupNum	ULSA4b8_DC.h	/^  int  curSupNum;$/;"	m	class:ULSA4b8_DC
dataBits	ULSA4b8_DC.h	/^  double dataBits;$/;"	m	class:ULSA4b8_DC
debug_CheckSizeCorrect	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::debug_CheckSizeCorrect() {$/;"	f	class:ULSA4b8_DC
decideAdd3i_DC_HeadDetMemRan	ULSA4b8_DC.cpp	/^ void ULSA4b8_DC::decideAdd3i_DC_HeadDetMemRan() {$/;"	f	class:ULSA4b8_DC
decideDiscard3b	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::decideDiscard3b()$/;"	f	class:ULSA4b8_DC
decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio() {$/;"	f	class:ULSA4b8_DC
decideHeadJoining4b	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::decideHeadJoining4b(){$/;"	f	class:ULSA4b8_DC
decideHeadRotate2i_DC_HeadRanMemDet	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::decideHeadRotate2i_DC_HeadRanMemDet()$/;"	f	class:ULSA4b8_DC
decideIsolate4b	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::decideIsolate4b(){$/;"	f	class:ULSA4b8_DC
discardMemberSA	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::discardMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b8_DC
distanceOf2Nodes	ULSA4b8_DC.h	/^  float **distanceOf2Nodes;$/;"	m	class:ULSA4b8_DC
do1sttierPowerControlforCur_DataCentric	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::do1sttierPowerControlforCur_DataCentric() {$/;"	f	class:ULSA4b8_DC
end	ULSA4b8_DC.h	/^  clock_t begin, end;$/;"	m	class:ULSA4b8_DC
estimateIsolate2ndTierGain	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::estimateIsolate2ndTierGain(int IsoNodeName,int isoCluIndex){$/;"	f	class:ULSA4b8_DC
estimateJoin2ndTierCost	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::estimateJoin2ndTierCost(int joinCHIdx, int targetCHIdx){$/;"	f	class:ULSA4b8_DC
fidelityRatio	ULSA4b8_DC.h	/^  double fidelityRatio;\/\/ Temporary set by here 2013\/02\/21$/;"	m	class:ULSA4b8_DC
flagAnsFound	ULSA4b8_DC.h	/^  bool flagAnsFound;$/;"	m	class:ULSA4b8_DC
headCandidatesNum	ULSA4b8_DC.h	/^  int headCandidatesNum;$/;"	m	class:ULSA4b8_DC
indEntropy	ULSA4b8_DC.h	/^  double indEntropy;$/;"	m	class:ULSA4b8_DC
iniDone	ULSA4b8_DC.h	/^  bool iniDone;$/;"	m	class:ULSA4b8_DC
isDetailOutputOn	ULSA4b8_DC.h	/^  int isDetailOutputOn;$/;"	m	class:ULSA4b8_DC
isolateHeadSA	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::isolateHeadSA(int isoName,int IsolateCluI, int targetH){$/;"	f	class:ULSA4b8_DC
isolatedHeadIndex	ULSA4b8_DC.h	/^  int  isolatedHeadIndex;$/;"	m	class:ULSA4b8_DC
join_fromHeadSA	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::join_fromHeadSA(int JoiningHeadIndex,int targetH){$/;"	f	class:ULSA4b8_DC
keepBestStructure	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::keepBestStructure()$/;"	f	class:ULSA4b8_DC
lastIsoPassAccu	ULSA4b8_DC.h	/^  int lastIsoPassAccu;$/;"	m	class:ULSA4b8_DC
lastIsolateNodeName	ULSA4b8_DC.h	/^  int lastIsolateNodeName;$/;"	m	class:ULSA4b8_DC
lastIsolatedClusterIndex	ULSA4b8_DC.h	/^  int lastIsolatedClusterIndex;$/;"	m	class:ULSA4b8_DC
lastJoinPassAccu	ULSA4b8_DC.h	/^  int lastJoinPassAccu;$/;"	m	class:ULSA4b8_DC
lastJoingingMachine	ULSA4b8_DC.h	/^  vector<int> lastJoingingMachine;$/;"	m	class:ULSA4b8_DC
lastJoiningHead	ULSA4b8_DC.h	/^  int lastJoiningHead;$/;"	m	class:ULSA4b8_DC
lastJoiningHeadIndex	ULSA4b8_DC.h	/^  int lastJoiningHeadIndex;$/;"	m	class:ULSA4b8_DC
listCluMemBest	ULSA4b8_DC.h	/^  list <list <int> > *listCluMemBest;$/;"	m	class:ULSA4b8_DC
m_bestStructure	ULSA4b8_DC.h	/^  ClusterStructure m_bestStructure; $/;"	m	class:ULSA4b8_DC
m_listCluMember	ClusterStructure.h	/^    list<list<int> >  m_listCluMember;$/;"	m	class:ClusterStructure
m_mapId	ULSA4b8_DC.h	/^  int m_mapId;$/;"	m	class:ULSA4b8_DC
m_maxNumCh	ClusterStructure.h	/^    const int         m_maxNumCh;$/;"	m	class:ClusterStructure
m_numNode	ClusterStructure.h	/^    const int         m_numNode;$/;"	m	class:ClusterStructure
m_vecCHIdxForNodes	ClusterStructure.h	/^    vector<int>       m_vecCHIdxForNodes;$/;"	m	class:ClusterStructure
m_vecCHNameForNodes	ClusterStructure.h	/^    vector<int>       m_vecCHNameForNodes;$/;"	m	class:ClusterStructure
m_vecHeadName	ClusterStructure.h	/^    vector<int>       m_vecHeadName;$/;"	m	class:ClusterStructure
maBestInterference	ULSA4b8_DC.h	/^  double **maBestInterference;$/;"	m	class:ULSA4b8_DC
maBestInterfernceIndex	ULSA4b8_DC.h	/^  int **maBestInterfernceIndex;$/;"	m	class:ULSA4b8_DC
maIndexSortDecGain	ULSA4b8_DC.h	/^  int ** maIndexSortDecGain;$/;"	m	class:ULSA4b8_DC
maStrengthInterBest	ULSA4b8_DC.h	/^  double ** maStrengthInterBest;$/;"	m	class:ULSA4b8_DC
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
mapNodeName2DistanceRank	ULSA4b8_DC.h	/^  map <int, int>  *mapNodeName2DistanceRank;$/;"	m	class:ULSA4b8_DC
matrixComputer	ULSA4b8_DC.h	/^  CORRE_MA_OPE * matrixComputer;$/;"	m	class:ULSA4b8_DC
mySA	ULSA4b8_DC.h	/^    const ULSA4b8_DC& mySA;\/\/ data member$/;"	m	struct:ULSA4b8_DC::compareDis
next1st_Joule	ULSA4b8_DC.h	/^  double next1st_Joule;$/;"	m	class:ULSA4b8_DC
next1st_ms	ULSA4b8_DC.h	/^  double next1st_ms;$/;"	m	class:ULSA4b8_DC
next2nd_Joule	ULSA4b8_DC.h	/^  double next2nd_Joule;$/;"	m	class:ULSA4b8_DC
next2nd_ms	ULSA4b8_DC.h	/^  double next2nd_ms;$/;"	m	class:ULSA4b8_DC
nextChNum	ULSA4b8_DC.h	/^  int nextChNum;$/;"	m	class:ULSA4b8_DC
nextEventFlag	ULSA4b8_DC.h	/^  int  nextEventFlag;$/;"	m	class:ULSA4b8_DC
nextJEntropy	ULSA4b8_DC.h	/^  double  nextJEntropy;$/;"	m	class:ULSA4b8_DC
nextNodePower	ULSA4b8_DC.h	/^  double* nextNodePower;$/;"	m	class:ULSA4b8_DC
nextPayoff	ULSA4b8_DC.h	/^  double nextPayoff;$/;"	m	class:ULSA4b8_DC
nextSupNum	ULSA4b8_DC.h	/^  int  nextSupNum;$/;"	m	class:ULSA4b8_DC
nodes	ULSA4b8_DC.h	/^  std::vector <ULAGENT> nodes;$/;"	m	class:ULSA4b8_DC
operator ()	ULSA4b8_DC.h	/^    bool operator() (const int &i, const int &j)$/;"	f	struct:ULSA4b8_DC::compareDis
passNext2Cur	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::passNext2Cur() {$/;"	f	class:ULSA4b8_DC
power1st	ULSA4b8_DC.h	/^  double  power1st;$/;"	m	class:ULSA4b8_DC
powerBest	ULSA4b8_DC.h	/^  double *powerBest;$/;"	m	class:ULSA4b8_DC
powerLastDiscard	ULSA4b8_DC.h	/^  double powerLastDiscard;$/;"	m	class:ULSA4b8_DC
powerMax	ULSA4b8_DC.h	/^  double  powerMax;$/;"	m	class:ULSA4b8_DC
printClusterList	ULSA4b8_DC.cpp	/^void printClusterList(ULCS1b *cSystem)$/;"	f
printVecMatrix	ULSA4b8_DC.cpp	/^void printVecMatrix(vector <vector<int> >& ma)$/;"	f
print_addresses	main.cpp	/^int print_addresses(const int domain, string& ipAddr)$/;"	f
ptrHeadLastDiscard	ULSA4b8_DC.h	/^  int  *ptrHeadLastDiscard;$/;"	m	class:ULSA4b8_DC
quantizationBits	ULSA4b8_DC.h	/^  int     quantizationBits;$/;"	m	class:ULSA4b8_DC
radius	ULSA4b8_DC.h	/^  double radius;$/;"	m	class:ULSA4b8_DC
rateibMax	ULSA4b8_DC.h	/^  double *rateibMax; \/\/$/;"	m	class:ULSA4b8_DC
realNoise	ULSA4b8_DC.h	/^  double realNoise;$/;"	m	class:ULSA4b8_DC
releaseMemory	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::releaseMemory()$/;"	f	class:ULSA4b8_DC
resetSA3iSystem	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::resetSA3iSystem() {$/;"	f	class:ULSA4b8_DC
return1stTotalNcal1stResors_HomoPower	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::return1stTotalNcal1stResors_HomoPower() {$/;"	f	class:ULSA4b8_DC
returnClosetNodeIndexInGroup	ULSA4b8_DC.cpp	/^int ULSA4b8_DC::returnClosetNodeIndexInGroup(int tempX,int tempY, vector<int> &inputGroup)$/;"	f	class:ULSA4b8_DC
returnComprRatio	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::returnComprRatio()$/;"	f	class:ULSA4b8_DC
returnTransientAveragePower	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::returnTransientAveragePower()$/;"	f	class:ULSA4b8_DC
returnTransientJoule	ULSA4b8_DC.cpp	/^double ULSA4b8_DC::returnTransientJoule() {$/;"	f	class:ULSA4b8_DC
reverseMoveSA	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::reverseMoveSA()$/;"	f	class:ULSA4b8_DC
rotateHeadSA	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::rotateHeadSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b8_DC
rotatedHeadNameLast	ULSA4b8_DC.h	/^  int rotatedHeadNameLast;$/;"	m	class:ULSA4b8_DC
roundBest	ULSA4b8_DC.h	/^  int  roundBest;;$/;"	m	class:ULSA4b8_DC
setIniHeadLimited	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setIniHeadLimited()$/;"	f	class:ULSA4b8_DC
setIniStruDistanceKmedoids	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setIniStruDistanceKmedoids() $/;"	f	class:ULSA4b8_DC
setIniStruFullResourceKmedoids	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setIniStruFullResourceKmedoids()$/;"	f	class:ULSA4b8_DC
setIniStruHalfResourceKmedoids	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setIniStruHalfResourceKmedoids()$/;"	f	class:ULSA4b8_DC
setIniStruKmeans	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setIniStruKmeans()$/;"	f	class:ULSA4b8_DC
setInitialStucture	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setInitialStucture(const string& iniFlag)$/;"	f	class:ULSA4b8_DC
setSystem	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::setSystem(float inPowerMaxWatt, int inQuantizationBits,double inBandwidthKhz, double inFidelity)$/;"	f	class:ULSA4b8_DC
sortIndex	ULSA4b8_DC.h	/^  int sortIndex;$/;"	m	class:ULSA4b8_DC
split	utility.cpp	/^std::vector<std::string> &split(const std::string &s, char delim, std::vector<std::string> &elems) {$/;"	f
split	utility.cpp	/^std::vector<std::string> split(const std::string &s, char delim) {$/;"	f
startCool	ULSA4b8_DC.cpp	/^bool ULSA4b8_DC::startCool()$/;"	f	class:ULSA4b8_DC
strIpAddr	ULSA4b8_DC.h	/^  string strIpAddr; $/;"	m	class:ULSA4b8_DC
sysComputing	ULSA4b8_DC.h	/^  SimSystem *sysComputing;$/;"	m	class:ULSA4b8_DC
targetHeadIndex	ULSA4b8_DC.h	/^  int  targetHeadIndex;$/;"	m	class:ULSA4b8_DC
targetNode	ULSA4b8_DC.h	/^  int  targetNode;$/;"	m	class:ULSA4b8_DC
tempAddT	ULSA4b8_DC.h	/^  double tempAddT;$/;"	m	class:ULSA4b8_DC
tempDisT	ULSA4b8_DC.h	/^  double tempDisT;$/;"	m	class:ULSA4b8_DC
tempHRT	ULSA4b8_DC.h	/^  double tempHRT;$/;"	m	class:ULSA4b8_DC
tempIsoT	ULSA4b8_DC.h	/^  double tempIsoT;$/;"	m	class:ULSA4b8_DC
tempJoinT	ULSA4b8_DC.h	/^  double tempJoinT;$/;"	m	class:ULSA4b8_DC
terminated	ULSA4b8_DC.h	/^  bool terminated;$/;"	m	class:ULSA4b8_DC
thres2	ULSA4b8_DC.h	/^  static const int thres2=200;$/;"	m	class:ULSA4b8_DC
thresholdd	ULSA4b8_DC.h	/^  static const int thresholdd=5;$/;"	m	class:ULSA4b8_DC
updateIsolateEstimatedpower	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::updateIsolateEstimatedpower(vector<double> &newPower,int IsolName,int isoCluIndex){$/;"	f	class:ULSA4b8_DC
updateJoinEstimatedPower	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::updateJoinEstimatedPower(vector<double> &newPower, $/;"	f	class:ULSA4b8_DC
vecBestBpshz_forVerification	ULSA4b8_DC.h	/^  vector<double> vecBestBpshz_forVerification;$/;"	m	class:ULSA4b8_DC
vecBestClusterBits	ULSA4b8_DC.h	/^  vector<double> vecBestClusterBits;$/;"	m	class:ULSA4b8_DC
vecBestClusterHeadMS	ULSA4b8_DC.h	/^  vector<double> vecBestClusterHeadMS;$/;"	m	class:ULSA4b8_DC
vecBestClusterHeadWatt	ULSA4b8_DC.h	/^  vector<double> vecBestClusterHeadWatt;$/;"	m	class:ULSA4b8_DC
vecBestClusterSize	ULSA4b8_DC.h	/^  vector<int> vecBestClusterSize;$/;"	m	class:ULSA4b8_DC
vecBestReceivedInterference	ULSA4b8_DC.h	/^  vector<double> vecBestReceivedInterference;$/;"	m	class:ULSA4b8_DC
vecBestSINR_forVerification	ULSA4b8_DC.h	/^  vector<double> vecBestSINR_forVerification;$/;"	m	class:ULSA4b8_DC
vecChooseIndex	ULSA4b8_DC.h	/^  vector<double> vecChooseIndex;$/;"	m	class:ULSA4b8_DC
vecClusterHeadBits	ULSA4b8_DC.h	/^  vector<double> vecClusterHeadBits;$/;"	m	class:ULSA4b8_DC
vecClusterHeadMS	ULSA4b8_DC.h	/^  vector<double> vecClusterHeadMS;$/;"	m	class:ULSA4b8_DC
vecClusterHeadWatt	ULSA4b8_DC.h	/^  vector<double> vecClusterHeadWatt;$/;"	m	class:ULSA4b8_DC
vecHeadCandidates	ULSA4b8_DC.h	/^  vector<int> vecHeadCandidates;$/;"	m	class:ULSA4b8_DC
vecHeadNameBest	ULSA4b8_DC.h	/^  vector <int> vecHeadNameBest;$/;"	m	class:ULSA4b8_DC
virtualCompression	ULSA4b8_DC.h	/^  double virtualCompression;$/;"	m	class:ULSA4b8_DC
wholeSystemEntopy	ULSA4b8_DC.h	/^  double wholeSystemEntopy;$/;"	m	class:ULSA4b8_DC
writePayoffEachRound_MinResors	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::writePayoffEachRound_MinResors(int round)$/;"	f	class:ULSA4b8_DC
writePayoffEachRound_MinResors_withHead	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::writePayoffEachRound_MinResors_withHead(int round,int head)$/;"	f	class:ULSA4b8_DC
writeStruSingleRound	ULSA4b8_DC.cpp	/^void ULSA4b8_DC::writeStruSingleRound(int round)$/;"	f	class:ULSA4b8_DC
~ClusterStructure	ClusterStructure.cpp	/^ClusterStructure::~ClusterStructure()$/;"	f	class:ClusterStructure
~ULSA4b8_DC	ULSA4b8_DC.cpp	/^ULSA4b8_DC::~ULSA4b8_DC()$/;"	f	class:ULSA4b8_DC

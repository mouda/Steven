!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CFLAGS	Makefile	/^CFLAGS= -g -D DEBUG $/;"	m
CPP	Makefile	/^CPP= g++$/;"	m
Gib	ULSA4b5_DC.h	/^  float *Gib; \/\/ channel gain from node i to base station$/;"	m	class:ULSA4b5_DC
Gij	ULSA4b5_DC.h	/^  float **Gij;\/\/ channel gain from node i to node j$/;"	m	class:ULSA4b5_DC
IsolateNodeName	ULSA4b5_DC.h	/^  int  IsolateNodeName;$/;"	m	class:ULSA4b5_DC
JoiningHeadIndex	ULSA4b5_DC.h	/^  int  JoiningHeadIndex;$/;"	m	class:ULSA4b5_DC
LIB_PATH	Makefile	/^LIB_PATH= ..\/commonLibrary\/CORRE_MA_OPE.o \\$/;"	m
SA_FIN_TEMP	main.cpp	12;"	d	file:
SA_INI_TEMP	main.cpp	11;"	d	file:
ULSA4b5_DC	ULSA4b5_DC.cpp	/^ULSA4b5_DC::ULSA4b5_DC() {};$/;"	f	class:ULSA4b5_DC
ULSA4b5_DC	ULSA4b5_DC.cpp	/^ULSA4b5_DC::ULSA4b5_DC(FILE *fileReadCursor, int inputTotalNodes, int inputMaxChNum,int inputSAFac,  \\$/;"	f	class:ULSA4b5_DC
ULSA4b5_DC	ULSA4b5_DC.h	/^class ULSA4b5_DC :public SABASE$/;"	c
ULSA4b5_DC_H	ULSA4b5_DC.h	17;"	d
addMemberSA	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::addMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b5_DC
addMemberSAIni	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::addMemberSAIni(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b5_DC
aryFlagHRDone	ULSA4b5_DC.h	/^  bool *aryFlagHRDone; \/\/If it is true means Head Rotate have been done in this structure, starrt from ULSA4b5_DC$/;"	m	class:ULSA4b5_DC
bandwidthKhz	ULSA4b5_DC.h	/^  double bandwidthKhz;$/;"	m	class:ULSA4b5_DC
begin	ULSA4b5_DC.h	/^  clock_t begin, end;$/;"	m	class:ULSA4b5_DC
best1stTierTraffic	ULSA4b5_DC.h	/^  double best1stTierTraffic;$/;"	m	class:ULSA4b5_DC
best1st_Joule	ULSA4b5_DC.h	/^  double best1st_Joule;$/;"	m	class:ULSA4b5_DC
best1st_ms	ULSA4b5_DC.h	/^  double best1st_ms;$/;"	m	class:ULSA4b5_DC
best2ndTierTraffic	ULSA4b5_DC.h	/^  double best2ndTierTraffic;$/;"	m	class:ULSA4b5_DC
best2nd_Joule	ULSA4b5_DC.h	/^  double best2nd_Joule;$/;"	m	class:ULSA4b5_DC
best2nd_ms	ULSA4b5_DC.h	/^  double best2nd_ms;$/;"	m	class:ULSA4b5_DC
bestAllServeFound	ULSA4b5_DC.h	/^  bool   bestAllServeFound;$/;"	m	class:ULSA4b5_DC
bestAllSupStru	ULSA4b5_DC.h	/^  bool *bestAllSupStru;$/;"	m	class:ULSA4b5_DC
bestAvgInterference	ULSA4b5_DC.h	/^  double bestAvgInterference;$/;"	m	class:ULSA4b5_DC
bestAvgPowerOFAllNodes	ULSA4b5_DC.h	/^  double bestAvgPowerOFAllNodes;$/;"	m	class:ULSA4b5_DC
bestChNum	ULSA4b5_DC.h	/^  int    bestChNum;$/;"	m	class:ULSA4b5_DC
bestFeasibleJEntropy	ULSA4b5_DC.h	/^  double bestFeasibleJEntropy;$/;"	m	class:ULSA4b5_DC
bestFeasiblePayoff	ULSA4b5_DC.h	/^  double bestFeasiblePayoff;$/;"	m	class:ULSA4b5_DC
bestFeasibleSupNum	ULSA4b5_DC.h	/^  int    bestFeasibleSupNum;$/;"	m	class:ULSA4b5_DC
bestMaClusterStru	ULSA4b5_DC.h	/^  bool** bestMaClusterStru;$/;"	m	class:ULSA4b5_DC
bestTrafficReductionRatio	ULSA4b5_DC.h	/^  double bestTrafficReductionRatio;$/;"	m	class:ULSA4b5_DC
bestUpperLayerResource	ULSA4b5_DC.h	/^  double bestUpperLayerResource;$/;"	m	class:ULSA4b5_DC
cSystem	ULSA4b5_DC.h	/^  ULCS1b*  cSystem;   \/\/ system cluseter structure$/;"	m	class:ULSA4b5_DC
calculateMatrics_minResors	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::calculateMatrics_minResors()\/\/Calculate next performance matircs$/;"	f	class:ULSA4b5_DC
checkBestClusterStructure_DataCentric	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::checkBestClusterStructure_DataCentric(int inputRound)$/;"	f	class:ULSA4b5_DC
checkNeighborhood	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::checkNeighborhood(int joinCHIdx, int targetCHIdx) {$/;"	f	class:ULSA4b5_DC
compRatio	ULSA4b5_DC.h	/^  double compRatio;$/;"	m	class:ULSA4b5_DC
compareDis	ULSA4b5_DC.h	/^    compareDis(const ULSA4b5_DC& sa) : mySA(sa) {} \/\/ constructor$/;"	f	struct:ULSA4b5_DC::compareDis
compareDis	ULSA4b5_DC.h	/^  struct compareDis$/;"	s	class:ULSA4b5_DC
computeBestAvgInterference	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeBestAvgInterference()$/;"	f	class:ULSA4b5_DC
computeBestAvgPower	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeBestAvgPower()$/;"	f	class:ULSA4b5_DC
computeBestTRR_DataCentric	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeBestTRR_DataCentric()$/;"	f	class:ULSA4b5_DC
computeNewInterference_FromIsoCluster	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeNewInterference_FromIsoCluster(vector<double> &newInterf,std::vector<double>&newPower,int IsoName,int isoCluIndex){$/;"	f	class:ULSA4b5_DC
computeNewInterference_FromNewTarHI	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeNewInterference_FromNewTarHI(vector<double> &newInterf,$/;"	f	class:ULSA4b5_DC
computeOriInterference_GivenIsolate	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeOriInterference_GivenIsolate(vector<double> &oriInterf,vector<double> &interfExcept,int isoCluIndex){$/;"	f	class:ULSA4b5_DC
computeOriInterference_GivenTarInJoinI	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeOriInterference_GivenTarInJoinI($/;"	f	class:ULSA4b5_DC
computePcInterference_GivenTarnInJoinI	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::computePcInterference_GivenTarnInJoinI(const int& joinCHIdx, const int& targetCHIdx){$/;"	f	class:ULSA4b5_DC
computeUpperResourceNoCodingNoPowerControl	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::computeUpperResourceNoCodingNoPowerControl()$/;"	f	class:ULSA4b5_DC
computingTimes	ULSA4b5_DC.h	/^  float computingTimes;$/;"	m	class:ULSA4b5_DC
confirmNeighbor3i	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::confirmNeighbor3i()$/;"	f	class:ULSA4b5_DC
confirmStructureChange	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::confirmStructureChange()$/;"	f	class:ULSA4b5_DC
consSol	ULSA4b5_DC.h	/^  ULConstraintSolver* consSol;$/;"	m	class:ULSA4b5_DC
coolOnce_minResors	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::coolOnce_minResors()$/;"	f	class:ULSA4b5_DC
correlationFactor	ULSA4b5_DC.h	/^  double correlationFactor;$/;"	m	class:ULSA4b5_DC
cur1st_Joule	ULSA4b5_DC.h	/^  double cur1st_Joule;$/;"	m	class:ULSA4b5_DC
cur1st_ms	ULSA4b5_DC.h	/^  double cur1st_ms;$/;"	m	class:ULSA4b5_DC
cur2nd_Joule	ULSA4b5_DC.h	/^  double cur2nd_Joule;$/;"	m	class:ULSA4b5_DC
cur2nd_ms	ULSA4b5_DC.h	/^  double cur2nd_ms;$/;"	m	class:ULSA4b5_DC
curChNum	ULSA4b5_DC.h	/^  int curChNum;$/;"	m	class:ULSA4b5_DC
curJEntropy	ULSA4b5_DC.h	/^  double  curJEntropy;$/;"	m	class:ULSA4b5_DC
curPayoff	ULSA4b5_DC.h	/^  double curPayoff;$/;"	m	class:ULSA4b5_DC
curSupNum	ULSA4b5_DC.h	/^  int  curSupNum;$/;"	m	class:ULSA4b5_DC
dataBits	ULSA4b5_DC.h	/^  double dataBits;$/;"	m	class:ULSA4b5_DC
debug_CheckSizeCorrect	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::debug_CheckSizeCorrect() {$/;"	f	class:ULSA4b5_DC
decideAdd3i_DC_HeadDetMemRan	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::decideAdd3i_DC_HeadDetMemRan() {$/;"	f	class:ULSA4b5_DC
decideDiscard3b	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::decideDiscard3b()$/;"	f	class:ULSA4b5_DC
decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio() {$/;"	f	class:ULSA4b5_DC
decideHeadJoining4b	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::decideHeadJoining4b(){$/;"	f	class:ULSA4b5_DC
decideHeadRotate2i_DC_HeadRanMemDet	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::decideHeadRotate2i_DC_HeadRanMemDet()$/;"	f	class:ULSA4b5_DC
decideIsolate4b	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::decideIsolate4b(){$/;"	f	class:ULSA4b5_DC
discardMemberSA	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::discardMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b5_DC
distanceOf2Nodes	ULSA4b5_DC.h	/^  float **distanceOf2Nodes;$/;"	m	class:ULSA4b5_DC
do1sttierPowerControlforBest_DataCentric	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::do1sttierPowerControlforBest_DataCentric() {$/;"	f	class:ULSA4b5_DC
do1sttierPowerControlforCur_DataCentric	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::do1sttierPowerControlforCur_DataCentric() {$/;"	f	class:ULSA4b5_DC
do1sttierPowerControlforNext_DataCentric	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::do1sttierPowerControlforNext_DataCentric() {$/;"	f	class:ULSA4b5_DC
do1sttierPowerControlforTEMP_DataCentric	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::do1sttierPowerControlforTEMP_DataCentric(double &temp1stJoule, double &temp1stMs) {$/;"	f	class:ULSA4b5_DC
do1sttierPowerMaxforBest_DataCentric	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::do1sttierPowerMaxforBest_DataCentric() {$/;"	f	class:ULSA4b5_DC
end	ULSA4b5_DC.h	/^  clock_t begin, end;$/;"	m	class:ULSA4b5_DC
estimateIsolate2ndTierGain	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::estimateIsolate2ndTierGain(int IsoNodeName,int isoCluIndex){$/;"	f	class:ULSA4b5_DC
estimateJoin2ndTierCost	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::estimateJoin2ndTierCost(int joinCHIdx, int targetCHIdx){$/;"	f	class:ULSA4b5_DC
fidelityRatio	ULSA4b5_DC.h	/^  double fidelityRatio;\/\/ Temporary set by here 2013\/02\/21$/;"	m	class:ULSA4b5_DC
flagAnsFound	ULSA4b5_DC.h	/^  bool flagAnsFound;$/;"	m	class:ULSA4b5_DC
genNeighborhoodMat	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::genNeighborhoodMat(vector<vector<int> >) {$/;"	f	class:ULSA4b5_DC
headCandidatesNum	ULSA4b5_DC.h	/^  int headCandidatesNum;$/;"	m	class:ULSA4b5_DC
indEntropy	ULSA4b5_DC.h	/^  double indEntropy;$/;"	m	class:ULSA4b5_DC
iniDone	ULSA4b5_DC.h	/^  bool iniDone;$/;"	m	class:ULSA4b5_DC
isDetailOutputOn	ULSA4b5_DC.h	/^  int isDetailOutputOn;$/;"	m	class:ULSA4b5_DC
isolateHeadSA	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::isolateHeadSA(int isoName,int IsolateCluI, int targetH){$/;"	f	class:ULSA4b5_DC
isolatedHeadIndex	ULSA4b5_DC.h	/^  int  isolatedHeadIndex;$/;"	m	class:ULSA4b5_DC
join_fromHeadSA	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::join_fromHeadSA(int JoiningHeadIndex,int targetH){$/;"	f	class:ULSA4b5_DC
keepBestStructure	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::keepBestStructure()$/;"	f	class:ULSA4b5_DC
lastIsoPassAccu	ULSA4b5_DC.h	/^  int lastIsoPassAccu;$/;"	m	class:ULSA4b5_DC
lastIsolateNodeName	ULSA4b5_DC.h	/^  int lastIsolateNodeName;$/;"	m	class:ULSA4b5_DC
lastIsolatedClusterIndex	ULSA4b5_DC.h	/^  int lastIsolatedClusterIndex;$/;"	m	class:ULSA4b5_DC
lastJoinPassAccu	ULSA4b5_DC.h	/^  int lastJoinPassAccu;$/;"	m	class:ULSA4b5_DC
lastJoingingMachine	ULSA4b5_DC.h	/^  vector<int> lastJoingingMachine;$/;"	m	class:ULSA4b5_DC
lastJoiningHead	ULSA4b5_DC.h	/^  int lastJoiningHead;$/;"	m	class:ULSA4b5_DC
lastJoiningHeadIndex	ULSA4b5_DC.h	/^  int lastJoiningHeadIndex;$/;"	m	class:ULSA4b5_DC
listCluMemBest	ULSA4b5_DC.h	/^  list <list <int> > *listCluMemBest;$/;"	m	class:ULSA4b5_DC
maBestInterference	ULSA4b5_DC.h	/^  double **maBestInterference;$/;"	m	class:ULSA4b5_DC
maBestInterfernceIndex	ULSA4b5_DC.h	/^  int **maBestInterfernceIndex;$/;"	m	class:ULSA4b5_DC
maIndexSortDecGain	ULSA4b5_DC.h	/^  int ** maIndexSortDecGain;$/;"	m	class:ULSA4b5_DC
maStrengthInterBest	ULSA4b5_DC.h	/^  double ** maStrengthInterBest;$/;"	m	class:ULSA4b5_DC
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
mapNodeName2DistanceRank	ULSA4b5_DC.h	/^  map <int, int>  *mapNodeName2DistanceRank;$/;"	m	class:ULSA4b5_DC
matrixComputer	ULSA4b5_DC.h	/^  CORRE_MA_OPE * matrixComputer;$/;"	m	class:ULSA4b5_DC
mySA	ULSA4b5_DC.h	/^    const ULSA4b5_DC& mySA;\/\/ data member$/;"	m	struct:ULSA4b5_DC::compareDis
next1st_Joule	ULSA4b5_DC.h	/^  double next1st_Joule;$/;"	m	class:ULSA4b5_DC
next1st_ms	ULSA4b5_DC.h	/^  double next1st_ms;$/;"	m	class:ULSA4b5_DC
next2nd_Joule	ULSA4b5_DC.h	/^  double next2nd_Joule;$/;"	m	class:ULSA4b5_DC
next2nd_ms	ULSA4b5_DC.h	/^  double next2nd_ms;$/;"	m	class:ULSA4b5_DC
nextChNum	ULSA4b5_DC.h	/^  int nextChNum;$/;"	m	class:ULSA4b5_DC
nextEventFlag	ULSA4b5_DC.h	/^  int  nextEventFlag;$/;"	m	class:ULSA4b5_DC
nextJEntropy	ULSA4b5_DC.h	/^  double  nextJEntropy;$/;"	m	class:ULSA4b5_DC
nextNodePower	ULSA4b5_DC.h	/^  double* nextNodePower;$/;"	m	class:ULSA4b5_DC
nextPayoff	ULSA4b5_DC.h	/^  double nextPayoff;$/;"	m	class:ULSA4b5_DC
nextSupNum	ULSA4b5_DC.h	/^  int  nextSupNum;$/;"	m	class:ULSA4b5_DC
nodes	ULSA4b5_DC.h	/^  std::vector <ULAGENT> nodes;$/;"	m	class:ULSA4b5_DC
operator ()	ULSA4b5_DC.h	/^    bool operator() (const int &i, const int &j)$/;"	f	struct:ULSA4b5_DC::compareDis
passNext2Cur	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::passNext2Cur() {$/;"	f	class:ULSA4b5_DC
power1st	ULSA4b5_DC.h	/^  double power1st;$/;"	m	class:ULSA4b5_DC
powerBest	ULSA4b5_DC.h	/^  double *powerBest;$/;"	m	class:ULSA4b5_DC
powerLastDiscard	ULSA4b5_DC.h	/^  double powerLastDiscard;$/;"	m	class:ULSA4b5_DC
powerMax	ULSA4b5_DC.h	/^  float powerMax;$/;"	m	class:ULSA4b5_DC
printClusterList	ULSA4b5_DC.cpp	/^void printClusterList(ULCS1b *cSystem)$/;"	f
printVecMatrix	ULSA4b5_DC.cpp	/^void printVecMatrix(vector <vector<int> >& ma)$/;"	f
print_addresses	main.cpp	/^int print_addresses(const int domain, string& ipAddr)$/;"	f
ptrHeadLastDiscard	ULSA4b5_DC.h	/^  int  *ptrHeadLastDiscard;$/;"	m	class:ULSA4b5_DC
quantizationBits	ULSA4b5_DC.h	/^  int quantizationBits;$/;"	m	class:ULSA4b5_DC
radius	ULSA4b5_DC.h	/^  double radius;$/;"	m	class:ULSA4b5_DC
rateibMax	ULSA4b5_DC.h	/^  double *rateibMax; \/\/$/;"	m	class:ULSA4b5_DC
realNoise	ULSA4b5_DC.h	/^  double realNoise;$/;"	m	class:ULSA4b5_DC
releaseMemory	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::releaseMemory()$/;"	f	class:ULSA4b5_DC
resetSA3iSystem	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::resetSA3iSystem() {$/;"	f	class:ULSA4b5_DC
return1stTotalNcal1stResors_HomoPower	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::return1stTotalNcal1stResors_HomoPower() {$/;"	f	class:ULSA4b5_DC
returnClosetNodeIndexInGroup	ULSA4b5_DC.cpp	/^int ULSA4b5_DC::returnClosetNodeIndexInGroup(int tempX,int tempY, vector<int> &inputGroup)$/;"	f	class:ULSA4b5_DC
returnComprRatio	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::returnComprRatio()$/;"	f	class:ULSA4b5_DC
returnTransientAveragePower	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::returnTransientAveragePower()$/;"	f	class:ULSA4b5_DC
returnTransientJoule	ULSA4b5_DC.cpp	/^double ULSA4b5_DC::returnTransientJoule() {$/;"	f	class:ULSA4b5_DC
reverseMoveSA	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::reverseMoveSA()$/;"	f	class:ULSA4b5_DC
rotateHeadSA	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::rotateHeadSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSA4b5_DC
rotatedHeadNameLast	ULSA4b5_DC.h	/^  int rotatedHeadNameLast;$/;"	m	class:ULSA4b5_DC
roundBest	ULSA4b5_DC.h	/^  int  roundBest;;$/;"	m	class:ULSA4b5_DC
setIniHeadLimited	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::setIniHeadLimited()$/;"	f	class:ULSA4b5_DC
setIniStruKmeans	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::setIniStruKmeans()$/;"	f	class:ULSA4b5_DC
setInitialStucture	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::setInitialStucture(char* iniFlag)$/;"	f	class:ULSA4b5_DC
setSystem	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::setSystem(float inPowerMaxWatt, int inQuantizationBits,double inBandwidthKhz, double inFidelity)$/;"	f	class:ULSA4b5_DC
sortIndex	ULSA4b5_DC.h	/^  int sortIndex;$/;"	m	class:ULSA4b5_DC
startCool	ULSA4b5_DC.cpp	/^bool ULSA4b5_DC::startCool()$/;"	f	class:ULSA4b5_DC
strIpAddr	ULSA4b5_DC.h	/^  string strIpAddr; $/;"	m	class:ULSA4b5_DC
sysComputing	ULSA4b5_DC.h	/^  SimSystem *sysComputing;$/;"	m	class:ULSA4b5_DC
targetHeadIndex	ULSA4b5_DC.h	/^  int  targetHeadIndex;$/;"	m	class:ULSA4b5_DC
targetNode	ULSA4b5_DC.h	/^  int  targetNode;$/;"	m	class:ULSA4b5_DC
tempAddT	ULSA4b5_DC.h	/^  double tempAddT;$/;"	m	class:ULSA4b5_DC
tempDisT	ULSA4b5_DC.h	/^  double tempDisT;$/;"	m	class:ULSA4b5_DC
tempHRT	ULSA4b5_DC.h	/^  double tempHRT;$/;"	m	class:ULSA4b5_DC
tempIsoT	ULSA4b5_DC.h	/^  double tempIsoT;$/;"	m	class:ULSA4b5_DC
tempJoinT	ULSA4b5_DC.h	/^  double tempJoinT;$/;"	m	class:ULSA4b5_DC
terminated	ULSA4b5_DC.h	/^  bool terminated;$/;"	m	class:ULSA4b5_DC
thres2	ULSA4b5_DC.h	/^  static const int thres2=200;$/;"	m	class:ULSA4b5_DC
thresholdd	ULSA4b5_DC.h	/^  static const int thresholdd=5;$/;"	m	class:ULSA4b5_DC
updateIsolateEstimatedpower	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::updateIsolateEstimatedpower(vector<double> &newPower,int IsolName,int isoCluIndex){$/;"	f	class:ULSA4b5_DC
updateJoinEstimatedPower	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::updateJoinEstimatedPower(vector<double> &newPower, $/;"	f	class:ULSA4b5_DC
vecBestBpshz_forVerification	ULSA4b5_DC.h	/^  vector<double> vecBestBpshz_forVerification;$/;"	m	class:ULSA4b5_DC
vecBestClusterBits	ULSA4b5_DC.h	/^  vector<double> vecBestClusterBits;$/;"	m	class:ULSA4b5_DC
vecBestClusterHeadMS	ULSA4b5_DC.h	/^  vector<double> vecBestClusterHeadMS;$/;"	m	class:ULSA4b5_DC
vecBestClusterHeadWatt	ULSA4b5_DC.h	/^  vector<double> vecBestClusterHeadWatt;$/;"	m	class:ULSA4b5_DC
vecBestClusterSize	ULSA4b5_DC.h	/^  vector<int> vecBestClusterSize;$/;"	m	class:ULSA4b5_DC
vecBestReceivedInterference	ULSA4b5_DC.h	/^  vector<double> vecBestReceivedInterference;$/;"	m	class:ULSA4b5_DC
vecBestSINR_forVerification	ULSA4b5_DC.h	/^  vector<double> vecBestSINR_forVerification;$/;"	m	class:ULSA4b5_DC
vecChooseIndex	ULSA4b5_DC.h	/^  vector<double> vecChooseIndex;$/;"	m	class:ULSA4b5_DC
vecClusterHeadBits	ULSA4b5_DC.h	/^  vector<double> vecClusterHeadBits;$/;"	m	class:ULSA4b5_DC
vecClusterHeadMS	ULSA4b5_DC.h	/^  vector<double> vecClusterHeadMS;$/;"	m	class:ULSA4b5_DC
vecClusterHeadWatt	ULSA4b5_DC.h	/^  vector<double> vecClusterHeadWatt;$/;"	m	class:ULSA4b5_DC
vecHeadCandidates	ULSA4b5_DC.h	/^  vector<int> vecHeadCandidates;$/;"	m	class:ULSA4b5_DC
vecHeadNameBest	ULSA4b5_DC.h	/^  vector <int> vecHeadNameBest;$/;"	m	class:ULSA4b5_DC
virtualCompression	ULSA4b5_DC.h	/^  double virtualCompression;$/;"	m	class:ULSA4b5_DC
wholeSystemEntopy	ULSA4b5_DC.h	/^  double wholeSystemEntopy;$/;"	m	class:ULSA4b5_DC
writePayoffEachRound_MinResors	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::writePayoffEachRound_MinResors(int round)$/;"	f	class:ULSA4b5_DC
writePayoffEachRound_MinResors_withHead	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::writePayoffEachRound_MinResors_withHead(int round,int head)$/;"	f	class:ULSA4b5_DC
writeStruSingleRound	ULSA4b5_DC.cpp	/^void ULSA4b5_DC::writeStruSingleRound(int round)$/;"	f	class:ULSA4b5_DC
~ULSA4b5_DC	ULSA4b5_DC.cpp	/^ULSA4b5_DC::~ULSA4b5_DC()$/;"	f	class:ULSA4b5_DC

!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
COMM_UTILITY	Makefile	/^COMM_UTILITY= ..\/commonLibrary\/CORRE_MA_OPE.o \\$/;"	m
CPP	Makefile	/^CPP= g++$/;"	m
DFLAGS	Makefile	/^DFLAGS= -D DEBUG -g$/;"	m
Gib	ULSAEstimate.h	/^  float *Gib; \/\/ channel gain from node i to base station$/;"	m	class:ULSAEstimate
Gij	ULSAEstimate.h	/^  float **Gij;\/\/ channel gain from node i to node j$/;"	m	class:ULSAEstimate
INCLUDE	Makefile	/^INCLUDE= -I$(PREFIX)\/armadillo39202\/include\/$/;"	m
IsolateNodeName	ULSAEstimate.h	/^  int  IsolateNodeName;$/;"	m	class:ULSAEstimate
JoiningHeadIndex	ULSAEstimate.h	/^  int  JoiningHeadIndex;$/;"	m	class:ULSAEstimate
LIB_FLAGS	Makefile	/^LIB_FLAGS= -larmadillo -lopenblas -llapack  $/;"	m
LIB_PATH	Makefile	/^LIB_PATH = -L$(PREFIX)\/armadillo39202\/lib\/ \\$/;"	m
PREFIX	Makefile	/^PREFIX=\/opt$/;"	m
SA_FIN_TEMP	main.cpp	12;"	d	file:
SA_INI_TEMP	main.cpp	11;"	d	file:
ULSAEstimate	ULSAEstimate.cpp	/^ULSAEstimate::ULSAEstimate() {};$/;"	f	class:ULSAEstimate
ULSAEstimate	ULSAEstimate.cpp	/^ULSAEstimate::ULSAEstimate(FILE *fileReadCursor, int inputTotalNodes, int inputMaxChNum,int inputSAFac,  \\$/;"	f	class:ULSAEstimate
ULSAEstimate	ULSAEstimate.h	/^class ULSAEstimate :public SABASE$/;"	c
ULSAEstimate	ULSAEstimate_new.cpp	/^ULSAEstimate::ULSAEstimate() {};$/;"	f	class:ULSAEstimate
ULSAEstimate	ULSAEstimate_new.cpp	/^ULSAEstimate::ULSAEstimate(FILE *fileReadCursor, int inputTotalNodes, int inputMaxChNum,int inputSAFac,  \\$/;"	f	class:ULSAEstimate
ULSAEstimate_H	ULSAEstimate.h	17;"	d
addMemberSA	ULSAEstimate.cpp	/^void ULSAEstimate::addMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
addMemberSA	ULSAEstimate_new.cpp	/^void ULSAEstimate::addMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
addMemberSAIni	ULSAEstimate.cpp	/^void ULSAEstimate::addMemberSAIni(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
addMemberSAIni	ULSAEstimate_new.cpp	/^void ULSAEstimate::addMemberSAIni(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
aryFlagHRDone	ULSAEstimate.h	/^  bool *aryFlagHRDone; \/\/If it is true means Head Rotate have been done in this structure, starrt from ULSAEstimate$/;"	m	class:ULSAEstimate
bandwidthKhz	ULSAEstimate.h	/^  double bandwidthKhz;$/;"	m	class:ULSAEstimate
begin	ULSAEstimate.h	/^  clock_t begin, end;$/;"	m	class:ULSAEstimate
best1stTierTraffic	ULSAEstimate.h	/^  double best1stTierTraffic;$/;"	m	class:ULSAEstimate
best1st_Joule	ULSAEstimate.h	/^  double best1st_Joule;$/;"	m	class:ULSAEstimate
best1st_ms	ULSAEstimate.h	/^  double best1st_ms;$/;"	m	class:ULSAEstimate
best2ndTierTraffic	ULSAEstimate.h	/^  double best2ndTierTraffic;$/;"	m	class:ULSAEstimate
best2nd_Joule	ULSAEstimate.h	/^  double best2nd_Joule;$/;"	m	class:ULSAEstimate
best2nd_ms	ULSAEstimate.h	/^  double best2nd_ms;$/;"	m	class:ULSAEstimate
bestAllServeFound	ULSAEstimate.h	/^  bool   bestAllServeFound;$/;"	m	class:ULSAEstimate
bestAllSupStru	ULSAEstimate.h	/^  bool *bestAllSupStru;$/;"	m	class:ULSAEstimate
bestAvgInterference	ULSAEstimate.h	/^  double bestAvgInterference;$/;"	m	class:ULSAEstimate
bestAvgPowerOFAllNodes	ULSAEstimate.h	/^  double bestAvgPowerOFAllNodes;$/;"	m	class:ULSAEstimate
bestChNum	ULSAEstimate.h	/^  int    bestChNum;$/;"	m	class:ULSAEstimate
bestFeasibleJEntropy	ULSAEstimate.h	/^  double bestFeasibleJEntropy;$/;"	m	class:ULSAEstimate
bestFeasiblePayoff	ULSAEstimate.h	/^  double bestFeasiblePayoff;$/;"	m	class:ULSAEstimate
bestFeasibleSupNum	ULSAEstimate.h	/^  int    bestFeasibleSupNum;$/;"	m	class:ULSAEstimate
bestMaClusterStru	ULSAEstimate.h	/^  bool** bestMaClusterStru;$/;"	m	class:ULSAEstimate
bestTrafficReductionRatio	ULSAEstimate.h	/^  double bestTrafficReductionRatio;$/;"	m	class:ULSAEstimate
bestUpperLayerResource	ULSAEstimate.h	/^  double bestUpperLayerResource;$/;"	m	class:ULSAEstimate
cSystem	ULSAEstimate.h	/^  ULCS1b*  cSystem;   \/\/ system cluseter structure$/;"	m	class:ULSAEstimate
calculateMatrics_minResors	ULSAEstimate.cpp	/^void ULSAEstimate::calculateMatrics_minResors()\/\/Calculate next performance matircs$/;"	f	class:ULSAEstimate
calculateMatrics_minResors	ULSAEstimate_new.cpp	/^void ULSAEstimate::calculateMatrics_minResors()\/\/Calculate next performance matircs$/;"	f	class:ULSAEstimate
checkBestClusterStructure_DataCentric	ULSAEstimate.cpp	/^bool ULSAEstimate::checkBestClusterStructure_DataCentric(int inputRound)$/;"	f	class:ULSAEstimate
checkBestClusterStructure_DataCentric	ULSAEstimate_new.cpp	/^bool ULSAEstimate::checkBestClusterStructure_DataCentric(int inputRound)$/;"	f	class:ULSAEstimate
compRatio	ULSAEstimate.h	/^  double compRatio;$/;"	m	class:ULSAEstimate
compareDis	ULSAEstimate.h	/^    compareDis(const ULSAEstimate& sa) : mySA(sa) {} \/\/ constructor$/;"	f	struct:ULSAEstimate::compareDis
compareDis	ULSAEstimate.h	/^  struct compareDis$/;"	s	class:ULSAEstimate
computeBestAvgInterference	ULSAEstimate.cpp	/^void ULSAEstimate::computeBestAvgInterference()$/;"	f	class:ULSAEstimate
computeBestAvgInterference	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeBestAvgInterference()$/;"	f	class:ULSAEstimate
computeBestAvgPower	ULSAEstimate.cpp	/^void ULSAEstimate::computeBestAvgPower()$/;"	f	class:ULSAEstimate
computeBestAvgPower	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeBestAvgPower()$/;"	f	class:ULSAEstimate
computeBestTRR_DataCentric	ULSAEstimate.cpp	/^void ULSAEstimate::computeBestTRR_DataCentric()$/;"	f	class:ULSAEstimate
computeBestTRR_DataCentric	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeBestTRR_DataCentric()$/;"	f	class:ULSAEstimate
computeNewInterference_FromIsoCluster	ULSAEstimate.cpp	/^void ULSAEstimate::computeNewInterference_FromIsoCluster(vector<double> &newInterf,std::vector<double>&newPower,int IsoName,int isoCluIndex){$/;"	f	class:ULSAEstimate
computeNewInterference_FromIsoCluster	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeNewInterference_FromIsoCluster(vector<double> &newInterf,std::vector<double>&newPower,int IsoName,int isoCluIndex){$/;"	f	class:ULSAEstimate
computeNewInterference_FromNewTarHI	ULSAEstimate.cpp	/^void ULSAEstimate::computeNewInterference_FromNewTarHI(vector<double> &newInterf,$/;"	f	class:ULSAEstimate
computeNewInterference_FromNewTarHI	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeNewInterference_FromNewTarHI(vector<double> &newInterf,$/;"	f	class:ULSAEstimate
computeOriInterference_GivenIsolate	ULSAEstimate.cpp	/^void ULSAEstimate::computeOriInterference_GivenIsolate(vector<double> &oriInterf,vector<double> &interfExcept,int isoCluIndex){$/;"	f	class:ULSAEstimate
computeOriInterference_GivenIsolate	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeOriInterference_GivenIsolate(vector<double> &oriInterf,vector<double> &interfExcept,int isoCluIndex){$/;"	f	class:ULSAEstimate
computeOriInterference_GivenTarInJoinI	ULSAEstimate.cpp	/^void ULSAEstimate::computeOriInterference_GivenTarInJoinI($/;"	f	class:ULSAEstimate
computeOriInterference_GivenTarInJoinI	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeOriInterference_GivenTarInJoinI($/;"	f	class:ULSAEstimate
computeUpperResourceNoCodingNoPowerControl	ULSAEstimate.cpp	/^void ULSAEstimate::computeUpperResourceNoCodingNoPowerControl()$/;"	f	class:ULSAEstimate
computeUpperResourceNoCodingNoPowerControl	ULSAEstimate_new.cpp	/^void ULSAEstimate::computeUpperResourceNoCodingNoPowerControl()$/;"	f	class:ULSAEstimate
computingTimes	ULSAEstimate.h	/^  float computingTimes;$/;"	m	class:ULSAEstimate
confirmNeighbor3i	ULSAEstimate.cpp	/^void ULSAEstimate::confirmNeighbor3i()$/;"	f	class:ULSAEstimate
confirmNeighbor3i	ULSAEstimate_new.cpp	/^void ULSAEstimate::confirmNeighbor3i()$/;"	f	class:ULSAEstimate
confirmStructureChange	ULSAEstimate.cpp	/^void ULSAEstimate::confirmStructureChange()$/;"	f	class:ULSAEstimate
confirmStructureChange	ULSAEstimate_new.cpp	/^void ULSAEstimate::confirmStructureChange()$/;"	f	class:ULSAEstimate
consSol	ULSAEstimate.h	/^  ULConstraintSolver* consSol;$/;"	m	class:ULSAEstimate
coolOnce_minResors	ULSAEstimate.cpp	/^void ULSAEstimate::coolOnce_minResors()$/;"	f	class:ULSAEstimate
coolOnce_minResors	ULSAEstimate_new.cpp	/^void ULSAEstimate::coolOnce_minResors()$/;"	f	class:ULSAEstimate
correlationFactor	ULSAEstimate.h	/^  double correlationFactor;$/;"	m	class:ULSAEstimate
cur1st_Joule	ULSAEstimate.h	/^  double cur1st_Joule;$/;"	m	class:ULSAEstimate
cur1st_ms	ULSAEstimate.h	/^  double cur1st_ms;$/;"	m	class:ULSAEstimate
cur2nd_Joule	ULSAEstimate.h	/^  double cur2nd_Joule;$/;"	m	class:ULSAEstimate
cur2nd_ms	ULSAEstimate.h	/^  double cur2nd_ms;$/;"	m	class:ULSAEstimate
curChNum	ULSAEstimate.h	/^  int curChNum;$/;"	m	class:ULSAEstimate
curJEntropy	ULSAEstimate.h	/^  double  curJEntropy;$/;"	m	class:ULSAEstimate
curPayoff	ULSAEstimate.h	/^  double curPayoff;$/;"	m	class:ULSAEstimate
curSupNum	ULSAEstimate.h	/^  int  curSupNum;$/;"	m	class:ULSAEstimate
dataBits	ULSAEstimate.h	/^  double dataBits;$/;"	m	class:ULSAEstimate
debug_CheckSizeCorrect	ULSAEstimate.cpp	/^void ULSAEstimate::debug_CheckSizeCorrect() {$/;"	f	class:ULSAEstimate
debug_CheckSizeCorrect	ULSAEstimate_new.cpp	/^void ULSAEstimate::debug_CheckSizeCorrect() {$/;"	f	class:ULSAEstimate
decideAdd3i_DC_HeadDetMemRan	ULSAEstimate.cpp	/^ void ULSAEstimate::decideAdd3i_DC_HeadDetMemRan() {$/;"	f	class:ULSAEstimate
decideAdd3i_DC_HeadDetMemRan	ULSAEstimate_new.cpp	/^ void ULSAEstimate::decideAdd3i_DC_HeadDetMemRan() {$/;"	f	class:ULSAEstimate
decideDiscard3b	ULSAEstimate.cpp	/^void ULSAEstimate::decideDiscard3b()$/;"	f	class:ULSAEstimate
decideDiscard3b	ULSAEstimate_new.cpp	/^void ULSAEstimate::decideDiscard3b()$/;"	f	class:ULSAEstimate
decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio	ULSAEstimate.cpp	/^void ULSAEstimate::decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio() {$/;"	f	class:ULSAEstimate
decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio	ULSAEstimate_new.cpp	/^void ULSAEstimate::decideDiscard3i_DC_HeadRanNodeDet_CompressionRatio() {$/;"	f	class:ULSAEstimate
decideHeadJoining4b	ULSAEstimate.cpp	/^void ULSAEstimate::decideHeadJoining4b(){$/;"	f	class:ULSAEstimate
decideHeadJoining4b	ULSAEstimate_new.cpp	/^void ULSAEstimate::decideHeadJoining4b(){$/;"	f	class:ULSAEstimate
decideHeadRotate2i_DC_HeadRanMemDet	ULSAEstimate.cpp	/^void ULSAEstimate::decideHeadRotate2i_DC_HeadRanMemDet()$/;"	f	class:ULSAEstimate
decideHeadRotate2i_DC_HeadRanMemDet	ULSAEstimate_new.cpp	/^void ULSAEstimate::decideHeadRotate2i_DC_HeadRanMemDet()$/;"	f	class:ULSAEstimate
decideIsolate4b	ULSAEstimate.cpp	/^void ULSAEstimate::decideIsolate4b(){$/;"	f	class:ULSAEstimate
decideIsolate4b	ULSAEstimate_new.cpp	/^void ULSAEstimate::decideIsolate4b(){$/;"	f	class:ULSAEstimate
discardMemberSA	ULSAEstimate.cpp	/^void ULSAEstimate::discardMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
discardMemberSA	ULSAEstimate_new.cpp	/^void ULSAEstimate::discardMemberSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
distanceOf2Nodes	ULSAEstimate.h	/^  float **distanceOf2Nodes;$/;"	m	class:ULSAEstimate
do1sttierPowerControlforBest_DataCentric	ULSAEstimate.cpp	/^void ULSAEstimate::do1sttierPowerControlforBest_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforBest_DataCentric	ULSAEstimate_new.cpp	/^void ULSAEstimate::do1sttierPowerControlforBest_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforCur_DataCentric	ULSAEstimate.cpp	/^void ULSAEstimate::do1sttierPowerControlforCur_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforCur_DataCentric	ULSAEstimate_new.cpp	/^void ULSAEstimate::do1sttierPowerControlforCur_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforNext_DataCentric	ULSAEstimate.cpp	/^void ULSAEstimate::do1sttierPowerControlforNext_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforNext_DataCentric	ULSAEstimate_new.cpp	/^void ULSAEstimate::do1sttierPowerControlforNext_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforTEMP_DataCentric	ULSAEstimate.cpp	/^void ULSAEstimate::do1sttierPowerControlforTEMP_DataCentric(double &temp1stJoule, double &temp1stMs) {$/;"	f	class:ULSAEstimate
do1sttierPowerControlforTEMP_DataCentric	ULSAEstimate_new.cpp	/^void ULSAEstimate::do1sttierPowerControlforTEMP_DataCentric(double &temp1stJoule, double &temp1stMs) {$/;"	f	class:ULSAEstimate
do1sttierPowerMaxforBest_DataCentric	ULSAEstimate.cpp	/^void ULSAEstimate::do1sttierPowerMaxforBest_DataCentric() {$/;"	f	class:ULSAEstimate
do1sttierPowerMaxforBest_DataCentric	ULSAEstimate_new.cpp	/^void ULSAEstimate::do1sttierPowerMaxforBest_DataCentric() {$/;"	f	class:ULSAEstimate
end	ULSAEstimate.h	/^  clock_t begin, end;$/;"	m	class:ULSAEstimate
estimateIsolate2ndTierGain	ULSAEstimate.cpp	/^double ULSAEstimate::estimateIsolate2ndTierGain(int IsoNodeName,int isoCluIndex){$/;"	f	class:ULSAEstimate
estimateIsolate2ndTierGain	ULSAEstimate_new.cpp	/^double ULSAEstimate::estimateIsolate2ndTierGain(int IsoNodeName,int isoCluIndex){$/;"	f	class:ULSAEstimate
estimateJoin2ndTierCost	ULSAEstimate.cpp	/^double ULSAEstimate::estimateJoin2ndTierCost(int joinCHIdx, int targetCHIdx){$/;"	f	class:ULSAEstimate
estimateJoin2ndTierCost	ULSAEstimate_new.cpp	/^double ULSAEstimate::estimateJoin2ndTierCost(int joinCHIdx, int targetCHIdx){$/;"	f	class:ULSAEstimate
fidelityRatio	ULSAEstimate.h	/^  double fidelityRatio;\/\/ Temporary set by here 2013\/02\/21$/;"	m	class:ULSAEstimate
flagAnsFound	ULSAEstimate.h	/^  bool flagAnsFound;$/;"	m	class:ULSAEstimate
headCandidatesNum	ULSAEstimate.h	/^  int headCandidatesNum;$/;"	m	class:ULSAEstimate
indEntropy	ULSAEstimate.h	/^  double indEntropy;$/;"	m	class:ULSAEstimate
iniDone	ULSAEstimate.h	/^  bool iniDone;$/;"	m	class:ULSAEstimate
isDetailOutputOn	ULSAEstimate.h	/^  int isDetailOutputOn;$/;"	m	class:ULSAEstimate
isolateHeadSA	ULSAEstimate.cpp	/^void ULSAEstimate::isolateHeadSA(int isoName,int IsolateCluI, int targetH){$/;"	f	class:ULSAEstimate
isolateHeadSA	ULSAEstimate_new.cpp	/^void ULSAEstimate::isolateHeadSA(int isoName,int IsolateCluI, int targetH){$/;"	f	class:ULSAEstimate
isolatedHeadIndex	ULSAEstimate.h	/^  int  isolatedHeadIndex;$/;"	m	class:ULSAEstimate
join_fromHeadSA	ULSAEstimate.cpp	/^void ULSAEstimate::join_fromHeadSA(int JoiningHeadIndex,int targetH){$/;"	f	class:ULSAEstimate
join_fromHeadSA	ULSAEstimate_new.cpp	/^void ULSAEstimate::join_fromHeadSA(int JoiningHeadIndex,int targetH){$/;"	f	class:ULSAEstimate
keepBestStructure	ULSAEstimate.cpp	/^void ULSAEstimate::keepBestStructure()$/;"	f	class:ULSAEstimate
keepBestStructure	ULSAEstimate_new.cpp	/^void ULSAEstimate::keepBestStructure()$/;"	f	class:ULSAEstimate
lastIsoPassAccu	ULSAEstimate.h	/^  int lastIsoPassAccu;$/;"	m	class:ULSAEstimate
lastIsolateNodeName	ULSAEstimate.h	/^  int lastIsolateNodeName;$/;"	m	class:ULSAEstimate
lastIsolatedClusterIndex	ULSAEstimate.h	/^  int lastIsolatedClusterIndex;$/;"	m	class:ULSAEstimate
lastJoinPassAccu	ULSAEstimate.h	/^  int lastJoinPassAccu;$/;"	m	class:ULSAEstimate
lastJoingingMachine	ULSAEstimate.h	/^  vector<int> lastJoingingMachine;$/;"	m	class:ULSAEstimate
lastJoiningHead	ULSAEstimate.h	/^  int lastJoiningHead;$/;"	m	class:ULSAEstimate
lastJoiningHeadIndex	ULSAEstimate.h	/^  int lastJoiningHeadIndex;$/;"	m	class:ULSAEstimate
listCluMemBest	ULSAEstimate.h	/^  list <list <int> > *listCluMemBest;$/;"	m	class:ULSAEstimate
maBestInterference	ULSAEstimate.h	/^  double **maBestInterference;$/;"	m	class:ULSAEstimate
maBestInterfernceIndex	ULSAEstimate.h	/^  int **maBestInterfernceIndex;$/;"	m	class:ULSAEstimate
maIndexSortDecGain	ULSAEstimate.h	/^  int ** maIndexSortDecGain;$/;"	m	class:ULSAEstimate
maStrengthInterBest	ULSAEstimate.h	/^  double ** maStrengthInterBest;$/;"	m	class:ULSAEstimate
main	main.cpp	/^int main(int argc, char* argv[])$/;"	f
mapNodeName2DistanceRank	ULSAEstimate.h	/^  map <int, int>  *mapNodeName2DistanceRank;$/;"	m	class:ULSAEstimate
matrixComputer	ULSAEstimate.h	/^  CORRE_MA_OPE * matrixComputer;$/;"	m	class:ULSAEstimate
mySA	ULSAEstimate.h	/^    const ULSAEstimate& mySA;\/\/ data member$/;"	m	struct:ULSAEstimate::compareDis
next1st_Joule	ULSAEstimate.h	/^  double next1st_Joule;$/;"	m	class:ULSAEstimate
next1st_ms	ULSAEstimate.h	/^  double next1st_ms;$/;"	m	class:ULSAEstimate
next2nd_Joule	ULSAEstimate.h	/^  double next2nd_Joule;$/;"	m	class:ULSAEstimate
next2nd_ms	ULSAEstimate.h	/^  double next2nd_ms;$/;"	m	class:ULSAEstimate
nextChNum	ULSAEstimate.h	/^  int nextChNum;$/;"	m	class:ULSAEstimate
nextEventFlag	ULSAEstimate.h	/^  int  nextEventFlag;$/;"	m	class:ULSAEstimate
nextJEntropy	ULSAEstimate.h	/^  double  nextJEntropy;$/;"	m	class:ULSAEstimate
nextNodePower	ULSAEstimate.h	/^  double* nextNodePower;$/;"	m	class:ULSAEstimate
nextPayoff	ULSAEstimate.h	/^  double nextPayoff;$/;"	m	class:ULSAEstimate
nextSupNum	ULSAEstimate.h	/^  int  nextSupNum;$/;"	m	class:ULSAEstimate
nodes	ULSAEstimate.h	/^  std::vector <ULAGENT> nodes;$/;"	m	class:ULSAEstimate
operator ()	ULSAEstimate.h	/^    bool operator() (const int &i, const int &j)$/;"	f	struct:ULSAEstimate::compareDis
passNext2Cur	ULSAEstimate.cpp	/^void ULSAEstimate::passNext2Cur() {$/;"	f	class:ULSAEstimate
passNext2Cur	ULSAEstimate_new.cpp	/^void ULSAEstimate::passNext2Cur() {$/;"	f	class:ULSAEstimate
power1st	ULSAEstimate.h	/^  double power1st;$/;"	m	class:ULSAEstimate
powerBest	ULSAEstimate.h	/^  double *powerBest;$/;"	m	class:ULSAEstimate
powerLastDiscard	ULSAEstimate.h	/^  double powerLastDiscard;$/;"	m	class:ULSAEstimate
powerMax	ULSAEstimate.h	/^  float powerMax;$/;"	m	class:ULSAEstimate
printClusterList	ULSAEstimate.cpp	/^void printClusterList(ULCS1b *cSystem)$/;"	f
printClusterList	ULSAEstimate_new.cpp	/^void printClusterList(ULCS1b *cSystem)$/;"	f
printVecMatrix	ULSAEstimate.cpp	/^void printVecMatrix(vector <vector<int> >& ma)$/;"	f
printVecMatrix	ULSAEstimate_new.cpp	/^void printVecMatrix(vector <vector<int> >& ma)$/;"	f
print_addresses	main.cpp	/^int print_addresses(const int domain, string& ipAddr)$/;"	f
ptrHeadLastDiscard	ULSAEstimate.h	/^  int  *ptrHeadLastDiscard;$/;"	m	class:ULSAEstimate
quantizationBits	ULSAEstimate.h	/^  int quantizationBits;$/;"	m	class:ULSAEstimate
radius	ULSAEstimate.h	/^  double radius;$/;"	m	class:ULSAEstimate
rateibMax	ULSAEstimate.h	/^  double *rateibMax; \/\/$/;"	m	class:ULSAEstimate
realNoise	ULSAEstimate.h	/^  double realNoise;$/;"	m	class:ULSAEstimate
releaseMemory	ULSAEstimate.cpp	/^void ULSAEstimate::releaseMemory()$/;"	f	class:ULSAEstimate
releaseMemory	ULSAEstimate_new.cpp	/^void ULSAEstimate::releaseMemory()$/;"	f	class:ULSAEstimate
resetSA3iSystem	ULSAEstimate.cpp	/^void ULSAEstimate::resetSA3iSystem() {$/;"	f	class:ULSAEstimate
resetSA3iSystem	ULSAEstimate_new.cpp	/^void ULSAEstimate::resetSA3iSystem() {$/;"	f	class:ULSAEstimate
return1stTotalNcal1stResors_HomoPower	ULSAEstimate.cpp	/^double ULSAEstimate::return1stTotalNcal1stResors_HomoPower() {$/;"	f	class:ULSAEstimate
return1stTotalNcal1stResors_HomoPower	ULSAEstimate_new.cpp	/^double ULSAEstimate::return1stTotalNcal1stResors_HomoPower() {$/;"	f	class:ULSAEstimate
returnClosetNodeIndexInGroup	ULSAEstimate.cpp	/^int ULSAEstimate::returnClosetNodeIndexInGroup(int tempX,int tempY, vector<int> &inputGroup)$/;"	f	class:ULSAEstimate
returnClosetNodeIndexInGroup	ULSAEstimate_new.cpp	/^int ULSAEstimate::returnClosetNodeIndexInGroup(int tempX,int tempY, vector<int> &inputGroup)$/;"	f	class:ULSAEstimate
returnComprRatio	ULSAEstimate.cpp	/^double ULSAEstimate::returnComprRatio()$/;"	f	class:ULSAEstimate
returnComprRatio	ULSAEstimate_new.cpp	/^double ULSAEstimate::returnComprRatio()$/;"	f	class:ULSAEstimate
returnTransientAveragePower	ULSAEstimate.cpp	/^double ULSAEstimate::returnTransientAveragePower()$/;"	f	class:ULSAEstimate
returnTransientAveragePower	ULSAEstimate_new.cpp	/^double ULSAEstimate::returnTransientAveragePower()$/;"	f	class:ULSAEstimate
returnTransientJoule	ULSAEstimate.cpp	/^double ULSAEstimate::returnTransientJoule() {$/;"	f	class:ULSAEstimate
returnTransientJoule	ULSAEstimate_new.cpp	/^double ULSAEstimate::returnTransientJoule() {$/;"	f	class:ULSAEstimate
reverseMoveSA	ULSAEstimate.cpp	/^void ULSAEstimate::reverseMoveSA()$/;"	f	class:ULSAEstimate
reverseMoveSA	ULSAEstimate_new.cpp	/^void ULSAEstimate::reverseMoveSA()$/;"	f	class:ULSAEstimate
rotateHeadSA	ULSAEstimate.cpp	/^void ULSAEstimate::rotateHeadSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
rotateHeadSA	ULSAEstimate_new.cpp	/^void ULSAEstimate::rotateHeadSA(int inputHeadIndex, int inputMemberName)$/;"	f	class:ULSAEstimate
rotatedHeadNameLast	ULSAEstimate.h	/^  int rotatedHeadNameLast;$/;"	m	class:ULSAEstimate
roundBest	ULSAEstimate.h	/^  int  roundBest;;$/;"	m	class:ULSAEstimate
setIniHeadLimited	ULSAEstimate.cpp	/^bool ULSAEstimate::setIniHeadLimited()$/;"	f	class:ULSAEstimate
setIniHeadLimited	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setIniHeadLimited()$/;"	f	class:ULSAEstimate
setIniStruDistanceKmedoids	ULSAEstimate.cpp	/^bool ULSAEstimate::setIniStruDistanceKmedoids() $/;"	f	class:ULSAEstimate
setIniStruDistanceKmedoids	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setIniStruDistanceKmedoids() $/;"	f	class:ULSAEstimate
setIniStruFullResourceKmedoids	ULSAEstimate.cpp	/^bool ULSAEstimate::setIniStruFullResourceKmedoids()$/;"	f	class:ULSAEstimate
setIniStruFullResourceKmedoids	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setIniStruFullResourceKmedoids()$/;"	f	class:ULSAEstimate
setIniStruHalfResourceKmedoids	ULSAEstimate.cpp	/^bool ULSAEstimate::setIniStruHalfResourceKmedoids()$/;"	f	class:ULSAEstimate
setIniStruHalfResourceKmedoids	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setIniStruHalfResourceKmedoids()$/;"	f	class:ULSAEstimate
setIniStruKmeans	ULSAEstimate.cpp	/^bool ULSAEstimate::setIniStruKmeans()$/;"	f	class:ULSAEstimate
setIniStruKmeans	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setIniStruKmeans()$/;"	f	class:ULSAEstimate
setInitialStucture	ULSAEstimate.cpp	/^bool ULSAEstimate::setInitialStucture(char* iniFlag)$/;"	f	class:ULSAEstimate
setInitialStucture	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setInitialStucture(char* iniFlag)$/;"	f	class:ULSAEstimate
setSystem	ULSAEstimate.cpp	/^bool ULSAEstimate::setSystem(float inPowerMaxWatt, int inQuantizationBits,double inBandwidthKhz, double inFidelity)$/;"	f	class:ULSAEstimate
setSystem	ULSAEstimate_new.cpp	/^bool ULSAEstimate::setSystem(float inPowerMaxWatt, int inQuantizationBits,double inBandwidthKhz, double inFidelity)$/;"	f	class:ULSAEstimate
sortIndex	ULSAEstimate.h	/^  int sortIndex;$/;"	m	class:ULSAEstimate
startCool	ULSAEstimate.cpp	/^bool ULSAEstimate::startCool()$/;"	f	class:ULSAEstimate
startCool	ULSAEstimate_new.cpp	/^bool ULSAEstimate::startCool()$/;"	f	class:ULSAEstimate
strIpAddr	ULSAEstimate.h	/^  string strIpAddr; $/;"	m	class:ULSAEstimate
sysComputing	ULSAEstimate.h	/^  SimSystem *sysComputing;$/;"	m	class:ULSAEstimate
targetHeadIndex	ULSAEstimate.h	/^  int  targetHeadIndex;$/;"	m	class:ULSAEstimate
targetNode	ULSAEstimate.h	/^  int  targetNode;$/;"	m	class:ULSAEstimate
tempAddT	ULSAEstimate.h	/^  double tempAddT;$/;"	m	class:ULSAEstimate
tempDisT	ULSAEstimate.h	/^  double tempDisT;$/;"	m	class:ULSAEstimate
tempHRT	ULSAEstimate.h	/^  double tempHRT;$/;"	m	class:ULSAEstimate
tempIsoT	ULSAEstimate.h	/^  double tempIsoT;$/;"	m	class:ULSAEstimate
tempJoinT	ULSAEstimate.h	/^  double tempJoinT;$/;"	m	class:ULSAEstimate
terminated	ULSAEstimate.h	/^  bool terminated;$/;"	m	class:ULSAEstimate
thres2	ULSAEstimate.h	/^  static const int thres2=200;$/;"	m	class:ULSAEstimate
thresholdd	ULSAEstimate.h	/^  static const int thresholdd=5;$/;"	m	class:ULSAEstimate
updateIsolateEstimatedpower	ULSAEstimate.cpp	/^void ULSAEstimate::updateIsolateEstimatedpower(vector<double> &newPower,int IsolName,int isoCluIndex){$/;"	f	class:ULSAEstimate
updateIsolateEstimatedpower	ULSAEstimate_new.cpp	/^void ULSAEstimate::updateIsolateEstimatedpower(vector<double> &newPower,int IsolName,int isoCluIndex){$/;"	f	class:ULSAEstimate
updateJoinEstimatedPower	ULSAEstimate.cpp	/^void ULSAEstimate::updateJoinEstimatedPower(vector<double> &newPower, $/;"	f	class:ULSAEstimate
updateJoinEstimatedPower	ULSAEstimate_new.cpp	/^void ULSAEstimate::updateJoinEstimatedPower(vector<double> &newPower, $/;"	f	class:ULSAEstimate
vecBestBpshz_forVerification	ULSAEstimate.h	/^  vector<double> vecBestBpshz_forVerification;$/;"	m	class:ULSAEstimate
vecBestClusterBits	ULSAEstimate.h	/^  vector<double> vecBestClusterBits;$/;"	m	class:ULSAEstimate
vecBestClusterHeadMS	ULSAEstimate.h	/^  vector<double> vecBestClusterHeadMS;$/;"	m	class:ULSAEstimate
vecBestClusterHeadWatt	ULSAEstimate.h	/^  vector<double> vecBestClusterHeadWatt;$/;"	m	class:ULSAEstimate
vecBestClusterSize	ULSAEstimate.h	/^  vector<int> vecBestClusterSize;$/;"	m	class:ULSAEstimate
vecBestReceivedInterference	ULSAEstimate.h	/^  vector<double> vecBestReceivedInterference;$/;"	m	class:ULSAEstimate
vecBestSINR_forVerification	ULSAEstimate.h	/^  vector<double> vecBestSINR_forVerification;$/;"	m	class:ULSAEstimate
vecChooseIndex	ULSAEstimate.h	/^  vector<double> vecChooseIndex;$/;"	m	class:ULSAEstimate
vecClusterHeadBits	ULSAEstimate.h	/^  vector<double> vecClusterHeadBits;$/;"	m	class:ULSAEstimate
vecClusterHeadMS	ULSAEstimate.h	/^  vector<double> vecClusterHeadMS;$/;"	m	class:ULSAEstimate
vecClusterHeadWatt	ULSAEstimate.h	/^  vector<double> vecClusterHeadWatt;$/;"	m	class:ULSAEstimate
vecHeadCandidates	ULSAEstimate.h	/^  vector<int> vecHeadCandidates;$/;"	m	class:ULSAEstimate
vecHeadNameBest	ULSAEstimate.h	/^  vector <int> vecHeadNameBest;$/;"	m	class:ULSAEstimate
virtualCompression	ULSAEstimate.h	/^  double virtualCompression;$/;"	m	class:ULSAEstimate
wholeSystemEntopy	ULSAEstimate.h	/^  double wholeSystemEntopy;$/;"	m	class:ULSAEstimate
writePayoffEachRound_MinResors	ULSAEstimate.cpp	/^void ULSAEstimate::writePayoffEachRound_MinResors(int round)$/;"	f	class:ULSAEstimate
writePayoffEachRound_MinResors	ULSAEstimate_new.cpp	/^void ULSAEstimate::writePayoffEachRound_MinResors(int round)$/;"	f	class:ULSAEstimate
writePayoffEachRound_MinResors_withHead	ULSAEstimate.cpp	/^void ULSAEstimate::writePayoffEachRound_MinResors_withHead(int round,int head)$/;"	f	class:ULSAEstimate
writePayoffEachRound_MinResors_withHead	ULSAEstimate_new.cpp	/^void ULSAEstimate::writePayoffEachRound_MinResors_withHead(int round,int head)$/;"	f	class:ULSAEstimate
writeStruSingleRound	ULSAEstimate.cpp	/^void ULSAEstimate::writeStruSingleRound(int round)$/;"	f	class:ULSAEstimate
writeStruSingleRound	ULSAEstimate_new.cpp	/^void ULSAEstimate::writeStruSingleRound(int round)$/;"	f	class:ULSAEstimate
~ULSAEstimate	ULSAEstimate.cpp	/^ULSAEstimate::~ULSAEstimate()$/;"	f	class:ULSAEstimate
~ULSAEstimate	ULSAEstimate_new.cpp	/^ULSAEstimate::~ULSAEstimate()$/;"	f	class:ULSAEstimate
